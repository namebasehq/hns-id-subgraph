// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SldCommitIntent__nodeIntentBlockNumberResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getBlockNumber(): BigInt {
    return this.value0;
  }

  getUser(): Address {
    return this.value1;
  }
}

export class SldCommitIntent extends ethereum.SmartContract {
  static bind(address: Address): SldCommitIntent {
    return new SldCommitIntent("SldCommitIntent", address);
  }

  allowedCommit(_namehash: Bytes, _secret: Bytes, _addr: Address): boolean {
    let result = super.call(
      "allowedCommit",
      "allowedCommit(bytes32,bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_namehash),
        ethereum.Value.fromFixedBytes(_secret),
        ethereum.Value.fromAddress(_addr)
      ]
    );

    return result[0].toBoolean();
  }

  try_allowedCommit(
    _namehash: Bytes,
    _secret: Bytes,
    _addr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedCommit",
      "allowedCommit(bytes32,bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_namehash),
        ethereum.Value.fromFixedBytes(_secret),
        ethereum.Value.fromAddress(_addr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxBlockWaitForCommit(): BigInt {
    let result = super.call(
      "maxBlockWaitForCommit",
      "maxBlockWaitForCommit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxBlockWaitForCommit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxBlockWaitForCommit",
      "maxBlockWaitForCommit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBlockWaitForCommit(): BigInt {
    let result = super.call(
      "minBlockWaitForCommit",
      "minBlockWaitForCommit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBlockWaitForCommit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBlockWaitForCommit",
      "minBlockWaitForCommit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeIntentBlockNumber(
    param0: Bytes
  ): SldCommitIntent__nodeIntentBlockNumberResult {
    let result = super.call(
      "nodeIntentBlockNumber",
      "nodeIntentBlockNumber(bytes32):(uint96,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new SldCommitIntent__nodeIntentBlockNumberResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_nodeIntentBlockNumber(
    param0: Bytes
  ): ethereum.CallResult<SldCommitIntent__nodeIntentBlockNumberResult> {
    let result = super.tryCall(
      "nodeIntentBlockNumber",
      "nodeIntentBlockNumber(bytes32):(uint96,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SldCommitIntent__nodeIntentBlockNumberResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CommitIntentCall extends ethereum.Call {
  get inputs(): CommitIntentCall__Inputs {
    return new CommitIntentCall__Inputs(this);
  }

  get outputs(): CommitIntentCall__Outputs {
    return new CommitIntentCall__Outputs(this);
  }
}

export class CommitIntentCall__Inputs {
  _call: CommitIntentCall;

  constructor(call: CommitIntentCall) {
    this._call = call;
  }

  get _combinedHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CommitIntentCall__Outputs {
  _call: CommitIntentCall;

  constructor(call: CommitIntentCall) {
    this._call = call;
  }
}

export class MultiCommitIntentCall extends ethereum.Call {
  get inputs(): MultiCommitIntentCall__Inputs {
    return new MultiCommitIntentCall__Inputs(this);
  }

  get outputs(): MultiCommitIntentCall__Outputs {
    return new MultiCommitIntentCall__Outputs(this);
  }
}

export class MultiCommitIntentCall__Inputs {
  _call: MultiCommitIntentCall;

  constructor(call: MultiCommitIntentCall) {
    this._call = call;
  }

  get _combinedHashes(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MultiCommitIntentCall__Outputs {
  _call: MultiCommitIntentCall;

  constructor(call: MultiCommitIntentCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMaxBlockWaitForCommitCall extends ethereum.Call {
  get inputs(): UpdateMaxBlockWaitForCommitCall__Inputs {
    return new UpdateMaxBlockWaitForCommitCall__Inputs(this);
  }

  get outputs(): UpdateMaxBlockWaitForCommitCall__Outputs {
    return new UpdateMaxBlockWaitForCommitCall__Outputs(this);
  }
}

export class UpdateMaxBlockWaitForCommitCall__Inputs {
  _call: UpdateMaxBlockWaitForCommitCall;

  constructor(call: UpdateMaxBlockWaitForCommitCall) {
    this._call = call;
  }

  get _maxBlockWait(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxBlockWaitForCommitCall__Outputs {
  _call: UpdateMaxBlockWaitForCommitCall;

  constructor(call: UpdateMaxBlockWaitForCommitCall) {
    this._call = call;
  }
}

export class UpdateMinBlockWaitForCommitCall extends ethereum.Call {
  get inputs(): UpdateMinBlockWaitForCommitCall__Inputs {
    return new UpdateMinBlockWaitForCommitCall__Inputs(this);
  }

  get outputs(): UpdateMinBlockWaitForCommitCall__Outputs {
    return new UpdateMinBlockWaitForCommitCall__Outputs(this);
  }
}

export class UpdateMinBlockWaitForCommitCall__Inputs {
  _call: UpdateMinBlockWaitForCommitCall;

  constructor(call: UpdateMinBlockWaitForCommitCall) {
    this._call = call;
  }

  get _minBlockWait(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinBlockWaitForCommitCall__Outputs {
  _call: UpdateMinBlockWaitForCommitCall;

  constructor(call: UpdateMinBlockWaitForCommitCall) {
    this._call = call;
  }
}
