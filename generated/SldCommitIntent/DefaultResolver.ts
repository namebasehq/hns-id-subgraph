// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddrChanged extends ethereum.Event {
  get params(): AddrChanged__Params {
    return new AddrChanged__Params(this);
  }
}

export class AddrChanged__Params {
  _event: AddrChanged;

  constructor(event: AddrChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get a(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AddressChanged extends ethereum.Event {
  get params(): AddressChanged__Params {
    return new AddressChanged__Params(this);
  }
}

export class AddressChanged__Params {
  _event: AddressChanged;

  constructor(event: AddressChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get coinType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newAddress(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ContenthashChanged extends ethereum.Event {
  get params(): ContenthashChanged__Params {
    return new ContenthashChanged__Params(this);
  }
}

export class ContenthashChanged__Params {
  _event: ContenthashChanged;

  constructor(event: ContenthashChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get hash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class DNSRecordChanged extends ethereum.Event {
  get params(): DNSRecordChanged__Params {
    return new DNSRecordChanged__Params(this);
  }
}

export class DNSRecordChanged__Params {
  _event: DNSRecordChanged;

  constructor(event: DNSRecordChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get resource(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get record(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class DNSRecordDeleted extends ethereum.Event {
  get params(): DNSRecordDeleted__Params {
    return new DNSRecordDeleted__Params(this);
  }
}

export class DNSRecordDeleted__Params {
  _event: DNSRecordDeleted;

  constructor(event: DNSRecordDeleted) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get resource(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DNSZonehashChanged extends ethereum.Event {
  get params(): DNSZonehashChanged__Params {
    return new DNSZonehashChanged__Params(this);
  }
}

export class DNSZonehashChanged__Params {
  _event: DNSZonehashChanged;

  constructor(event: DNSZonehashChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get lastzonehash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get zonehash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class NameChanged extends ethereum.Event {
  get params(): NameChanged__Params {
    return new NameChanged__Params(this);
  }
}

export class NameChanged__Params {
  _event: NameChanged;

  constructor(event: NameChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ReverseClaimed extends ethereum.Event {
  get params(): ReverseClaimed__Params {
    return new ReverseClaimed__Params(this);
  }
}

export class ReverseClaimed__Params {
  _event: ReverseClaimed;

  constructor(event: ReverseClaimed) {
    this._event = event;
  }

  get _addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _domain(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class TextChanged extends ethereum.Event {
  get params(): TextChanged__Params {
    return new TextChanged__Params(this);
  }
}

export class TextChanged__Params {
  _event: TextChanged;

  constructor(event: TextChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get indexedKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get key(): string {
    return this._event.parameters[2].value.toString();
  }

  get value(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class UpdatedDelegate extends ethereum.Event {
  get params(): UpdatedDelegate__Params {
    return new UpdatedDelegate__Params(this);
  }
}

export class UpdatedDelegate__Params {
  _event: UpdatedDelegate;

  constructor(event: UpdatedDelegate) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _delegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class VersionChanged extends ethereum.Event {
  get params(): VersionChanged__Params {
    return new VersionChanged__Params(this);
  }
}

export class VersionChanged__Params {
  _event: VersionChanged;

  constructor(event: VersionChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newVersion(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DefaultResolver extends ethereum.SmartContract {
  static bind(address: Address): DefaultResolver {
    return new DefaultResolver("DefaultResolver", address);
  }

  addr(_node: Bytes): Address {
    let result = super.call("addr", "addr(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_node)
    ]);

    return result[0].toAddress();
  }

  try_addr(_node: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("addr", "addr(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addr1(_node: Bytes, _coinType: BigInt): Bytes {
    let result = super.call("addr", "addr(bytes32,uint256):(bytes)", [
      ethereum.Value.fromFixedBytes(_node),
      ethereum.Value.fromUnsignedBigInt(_coinType)
    ]);

    return result[0].toBytes();
  }

  try_addr1(_node: Bytes, _coinType: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("addr", "addr(bytes32,uint256):(bytes)", [
      ethereum.Value.fromFixedBytes(_node),
      ethereum.Value.fromUnsignedBigInt(_coinType)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  contenthash(_node: Bytes): Bytes {
    let result = super.call("contenthash", "contenthash(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(_node)
    ]);

    return result[0].toBytes();
  }

  try_contenthash(_node: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("contenthash", "contenthash(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(_node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  defaultCoinTypes(param0: BigInt): boolean {
    let result = super.call(
      "defaultCoinTypes",
      "defaultCoinTypes(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_defaultCoinTypes(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "defaultCoinTypes",
      "defaultCoinTypes(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegates(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "delegates",
      "delegates(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_delegates(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "delegates",
      "delegates(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dnsRecord(node: Bytes, name: Bytes, resource: i32): Bytes {
    let result = super.call(
      "dnsRecord",
      "dnsRecord(bytes32,bytes32,uint16):(bytes)",
      [
        ethereum.Value.fromFixedBytes(node),
        ethereum.Value.fromFixedBytes(name),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(resource))
      ]
    );

    return result[0].toBytes();
  }

  try_dnsRecord(
    node: Bytes,
    name: Bytes,
    resource: i32
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "dnsRecord",
      "dnsRecord(bytes32,bytes32,uint16):(bytes)",
      [
        ethereum.Value.fromFixedBytes(node),
        ethereum.Value.fromFixedBytes(name),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(resource))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getName(_addr: Address, _coinType: BigInt): string {
    let result = super.call("getName", "getName(address,uint256):(string)", [
      ethereum.Value.fromAddress(_addr),
      ethereum.Value.fromUnsignedBigInt(_coinType)
    ]);

    return result[0].toString();
  }

  try_getName(_addr: Address, _coinType: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName(address,uint256):(string)", [
      ethereum.Value.fromAddress(_addr),
      ethereum.Value.fromUnsignedBigInt(_coinType)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getText(_addr: Address, _key: string, _coinType: BigInt): string {
    let result = super.call(
      "getText",
      "getText(address,string,uint256):(string)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromString(_key),
        ethereum.Value.fromUnsignedBigInt(_coinType)
      ]
    );

    return result[0].toString();
  }

  try_getText(
    _addr: Address,
    _key: string,
    _coinType: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getText",
      "getText(address,string,uint256):(string)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromString(_key),
        ethereum.Value.fromUnsignedBigInt(_coinType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTokenOwner(_id: BigInt): Address {
    let result = super.call(
      "getTokenOwner",
      "getTokenOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toAddress();
  }

  try_getTokenOwner(_id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenOwner",
      "getTokenOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasDNSRecords(node: Bytes, name: Bytes): boolean {
    let result = super.call(
      "hasDNSRecords",
      "hasDNSRecords(bytes32,bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(node), ethereum.Value.fromFixedBytes(name)]
    );

    return result[0].toBoolean();
  }

  try_hasDNSRecords(node: Bytes, name: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasDNSRecords",
      "hasDNSRecords(bytes32,bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(node), ethereum.Value.fromFixedBytes(name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  multicallWithNodeCheck(nodehash: Bytes, data: Array<Bytes>): Array<Bytes> {
    let result = super.call(
      "multicallWithNodeCheck",
      "multicallWithNodeCheck(bytes32,bytes[]):(bytes[])",
      [
        ethereum.Value.fromFixedBytes(nodehash),
        ethereum.Value.fromBytesArray(data)
      ]
    );

    return result[0].toBytesArray();
  }

  try_multicallWithNodeCheck(
    nodehash: Bytes,
    data: Array<Bytes>
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "multicallWithNodeCheck",
      "multicallWithNodeCheck(bytes32,bytes[]):(bytes[])",
      [
        ethereum.Value.fromFixedBytes(nodehash),
        ethereum.Value.fromBytesArray(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(node: Bytes): string {
    let result = super.call("name", "name(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(node)
    ]);

    return result[0].toString();
  }

  try_name(node: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameMap(param0: Address): string {
    let result = super.call("nameMap", "nameMap(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_nameMap(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("nameMap", "nameMap(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  recordVersions(param0: Bytes): BigInt {
    let result = super.call(
      "recordVersions",
      "recordVersions(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_recordVersions(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recordVersions",
      "recordVersions(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  text(node: Bytes, key: string): string {
    let result = super.call("text", "text(bytes32,string):(string)", [
      ethereum.Value.fromFixedBytes(node),
      ethereum.Value.fromString(key)
    ]);

    return result[0].toString();
  }

  try_text(node: Bytes, key: string): ethereum.CallResult<string> {
    let result = super.tryCall("text", "text(bytes32,string):(string)", [
      ethereum.Value.fromFixedBytes(node),
      ethereum.Value.fromString(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  zonehash(_node: Bytes): Bytes {
    let result = super.call("zonehash", "zonehash(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(_node)
    ]);

    return result[0].toBytes();
  }

  try_zonehash(_node: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("zonehash", "zonehash(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(_node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tld(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sld(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class EmitEventsCall extends ethereum.Call {
  get inputs(): EmitEventsCall__Inputs {
    return new EmitEventsCall__Inputs(this);
  }

  get outputs(): EmitEventsCall__Outputs {
    return new EmitEventsCall__Outputs(this);
  }
}

export class EmitEventsCall__Inputs {
  _call: EmitEventsCall;

  constructor(call: EmitEventsCall) {
    this._call = call;
  }

  get _node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EmitEventsCall__Outputs {
  _call: EmitEventsCall;

  constructor(call: EmitEventsCall) {
    this._call = call;
  }
}

export class IncrementVersionCall extends ethereum.Call {
  get inputs(): IncrementVersionCall__Inputs {
    return new IncrementVersionCall__Inputs(this);
  }

  get outputs(): IncrementVersionCall__Outputs {
    return new IncrementVersionCall__Outputs(this);
  }
}

export class IncrementVersionCall__Inputs {
  _call: IncrementVersionCall;

  constructor(call: IncrementVersionCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class IncrementVersionCall__Outputs {
  _call: IncrementVersionCall;

  constructor(call: IncrementVersionCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class MulticallWithNodeCheckCall extends ethereum.Call {
  get inputs(): MulticallWithNodeCheckCall__Inputs {
    return new MulticallWithNodeCheckCall__Inputs(this);
  }

  get outputs(): MulticallWithNodeCheckCall__Outputs {
    return new MulticallWithNodeCheckCall__Outputs(this);
  }
}

export class MulticallWithNodeCheckCall__Inputs {
  _call: MulticallWithNodeCheckCall;

  constructor(call: MulticallWithNodeCheckCall) {
    this._call = call;
  }

  get nodehash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class MulticallWithNodeCheckCall__Outputs {
  _call: MulticallWithNodeCheckCall;

  constructor(call: MulticallWithNodeCheckCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class SetAddressCall extends ethereum.Call {
  get inputs(): SetAddressCall__Inputs {
    return new SetAddressCall__Inputs(this);
  }

  get outputs(): SetAddressCall__Outputs {
    return new SetAddressCall__Outputs(this);
  }
}

export class SetAddressCall__Inputs {
  _call: SetAddressCall;

  constructor(call: SetAddressCall) {
    this._call = call;
  }

  get _node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _addr(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _cointype(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetAddressCall__Outputs {
  _call: SetAddressCall;

  constructor(call: SetAddressCall) {
    this._call = call;
  }
}

export class SetAddress1Call extends ethereum.Call {
  get inputs(): SetAddress1Call__Inputs {
    return new SetAddress1Call__Inputs(this);
  }

  get outputs(): SetAddress1Call__Outputs {
    return new SetAddress1Call__Outputs(this);
  }
}

export class SetAddress1Call__Inputs {
  _call: SetAddress1Call;

  constructor(call: SetAddress1Call) {
    this._call = call;
  }

  get _node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAddress1Call__Outputs {
  _call: SetAddress1Call;

  constructor(call: SetAddress1Call) {
    this._call = call;
  }
}

export class SetContentHashCall extends ethereum.Call {
  get inputs(): SetContentHashCall__Inputs {
    return new SetContentHashCall__Inputs(this);
  }

  get outputs(): SetContentHashCall__Outputs {
    return new SetContentHashCall__Outputs(this);
  }
}

export class SetContentHashCall__Inputs {
  _call: SetContentHashCall;

  constructor(call: SetContentHashCall) {
    this._call = call;
  }

  get _node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _hash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetContentHashCall__Outputs {
  _call: SetContentHashCall;

  constructor(call: SetContentHashCall) {
    this._call = call;
  }
}

export class SetDNSRecordsCall extends ethereum.Call {
  get inputs(): SetDNSRecordsCall__Inputs {
    return new SetDNSRecordsCall__Inputs(this);
  }

  get outputs(): SetDNSRecordsCall__Outputs {
    return new SetDNSRecordsCall__Outputs(this);
  }
}

export class SetDNSRecordsCall__Inputs {
  _call: SetDNSRecordsCall;

  constructor(call: SetDNSRecordsCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetDNSRecordsCall__Outputs {
  _call: SetDNSRecordsCall;

  constructor(call: SetDNSRecordsCall) {
    this._call = call;
  }
}

export class SetDelegateCall extends ethereum.Call {
  get inputs(): SetDelegateCall__Inputs {
    return new SetDelegateCall__Inputs(this);
  }

  get outputs(): SetDelegateCall__Outputs {
    return new SetDelegateCall__Outputs(this);
  }
}

export class SetDelegateCall__Inputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDelegateCall__Outputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetTextCall extends ethereum.Call {
  get inputs(): SetTextCall__Inputs {
    return new SetTextCall__Inputs(this);
  }

  get outputs(): SetTextCall__Outputs {
    return new SetTextCall__Outputs(this);
  }
}

export class SetTextCall__Inputs {
  _call: SetTextCall;

  constructor(call: SetTextCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): string {
    return this._call.inputValues[1].value.toString();
  }

  get value(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetTextCall__Outputs {
  _call: SetTextCall;

  constructor(call: SetTextCall) {
    this._call = call;
  }
}

export class SetZonehashCall extends ethereum.Call {
  get inputs(): SetZonehashCall__Inputs {
    return new SetZonehashCall__Inputs(this);
  }

  get outputs(): SetZonehashCall__Outputs {
    return new SetZonehashCall__Outputs(this);
  }
}

export class SetZonehashCall__Inputs {
  _call: SetZonehashCall;

  constructor(call: SetZonehashCall) {
    this._call = call;
  }

  get _node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _hash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetZonehashCall__Outputs {
  _call: SetZonehashCall;

  constructor(call: SetZonehashCall) {
    this._call = call;
  }
}
