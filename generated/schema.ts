// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tld extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tld entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tld must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tld", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Tld | null {
    return changetype<Tld | null>(store.get_in_block("Tld", id));
  }

  static load(id: string): Tld | null {
    return changetype<Tld | null>(store.get("Tld", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimant(): string | null {
    let value = this.get("claimant");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set claimant(value: string | null) {
    if (!value) {
      this.unset("claimant");
    } else {
      this.set("claimant", Value.fromString(<string>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get saleSettings(): SaleSettingsLoader {
    return new SaleSettingsLoader(
      "Tld",
      this.get("id")!.toString(),
      "saleSettings"
    );
  }

  get slds(): SldLoader {
    return new SldLoader("Tld", this.get("id")!.toString(), "slds");
  }

  get royalty(): string | null {
    let value = this.get("royalty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set royalty(value: string | null) {
    if (!value) {
      this.unset("royalty");
    } else {
      this.set("royalty", Value.fromString(<string>value));
    }
  }

  get royaltyHistory(): RoyaltyHistoryLoader {
    return new RoyaltyHistoryLoader(
      "Tld",
      this.get("id")!.toString(),
      "royaltyHistory"
    );
  }

  get resolver(): string | null {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolver(value: string | null) {
    if (!value) {
      this.unset("resolver");
    } else {
      this.set("resolver", Value.fromString(<string>value));
    }
  }
}

export class Royalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Royalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Royalty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Royalty", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Royalty | null {
    return changetype<Royalty | null>(store.get_in_block("Royalty", id));
  }

  static load(id: string): Royalty | null {
    return changetype<Royalty | null>(store.get("Royalty", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get percentage(): BigInt | null {
    let value = this.get("percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set percentage(value: BigInt | null) {
    if (!value) {
      this.unset("percentage");
    } else {
      this.set("percentage", Value.fromBigInt(<BigInt>value));
    }
  }

  get payoutAddress(): string | null {
    let value = this.get("payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payoutAddress(value: string | null) {
    if (!value) {
      this.unset("payoutAddress");
    } else {
      this.set("payoutAddress", Value.fromString(<string>value));
    }
  }
}

export class RoyaltyHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RoyaltyHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RoyaltyHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RoyaltyHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RoyaltyHistory | null {
    return changetype<RoyaltyHistory | null>(
      store.get_in_block("RoyaltyHistory", id)
    );
  }

  static load(id: string): RoyaltyHistory | null {
    return changetype<RoyaltyHistory | null>(store.get("RoyaltyHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tld(): string {
    let value = this.get("tld");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tld(value: string) {
    this.set("tld", Value.fromString(value));
  }

  get percentage(): BigInt | null {
    let value = this.get("percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set percentage(value: BigInt | null) {
    if (!value) {
      this.unset("percentage");
    } else {
      this.set("percentage", Value.fromBigInt(<BigInt>value));
    }
  }

  get payoutAddress(): string | null {
    let value = this.get("payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payoutAddress(value: string | null) {
    if (!value) {
      this.unset("payoutAddress");
    } else {
      this.set("payoutAddress", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class ResolverHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResolverHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ResolverHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ResolverHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ResolverHistory | null {
    return changetype<ResolverHistory | null>(
      store.get_in_block("ResolverHistory", id)
    );
  }

  static load(id: string): ResolverHistory | null {
    return changetype<ResolverHistory | null>(store.get("ResolverHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get changeType(): string {
    let value = this.get("changeType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set changeType(value: string) {
    this.set("changeType", Value.fromString(value));
  }

  get changedAt(): BigInt {
    let value = this.get("changedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set changedAt(value: BigInt) {
    this.set("changedAt", Value.fromBigInt(value));
  }
}

export class Sld extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sld entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Sld must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sld", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Sld | null {
    return changetype<Sld | null>(store.get_in_block("Sld", id));
  }

  static load(id: string): Sld | null {
    return changetype<Sld | null>(store.get("Sld", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get fullName(): string {
    let value = this.get("fullName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fullName(value: string) {
    this.set("fullName", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get registrant(): string {
    let value = this.get("registrant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registrant(value: string) {
    this.set("registrant", Value.fromString(value));
  }

  get parentTld(): string {
    let value = this.get("parentTld");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set parentTld(value: string) {
    this.set("parentTld", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get resolver(): string | null {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolver(value: string | null) {
    if (!value) {
      this.unset("resolver");
    } else {
      this.set("resolver", Value.fromString(<string>value));
    }
  }

  get renewals(): RenewalEventLoader {
    return new RenewalEventLoader(
      "Sld",
      this.get("id")!.toString(),
      "renewals"
    );
  }
}

export class RenewalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RenewalEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RenewalEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RenewalEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RenewalEvent | null {
    return changetype<RenewalEvent | null>(
      store.get_in_block("RenewalEvent", id)
    );
  }

  static load(id: string): RenewalEvent | null {
    return changetype<RenewalEvent | null>(store.get("RenewalEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get sld(): string {
    let value = this.get("sld");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sld(value: string) {
    this.set("sld", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get renewer(): string {
    let value = this.get("renewer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set renewer(value: string) {
    this.set("renewer", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SaleSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaleSettings entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SaleSettings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SaleSettings", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SaleSettings | null {
    return changetype<SaleSettings | null>(
      store.get_in_block("SaleSettings", id)
    );
  }

  static load(id: string): SaleSettings | null {
    return changetype<SaleSettings | null>(store.get("SaleSettings", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tld(): string {
    let value = this.get("tld");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tld(value: string) {
    this.set("tld", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get prices(): Array<BigInt> | null {
    let value = this.get("prices");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set prices(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("prices");
    } else {
      this.set("prices", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get discounts(): Array<BigInt> | null {
    let value = this.get("discounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set discounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("discounts");
    } else {
      this.set("discounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get premiumPrices(): PremiumPriceLoader {
    return new PremiumPriceLoader(
      "SaleSettings",
      this.get("id")!.toString(),
      "premiumPrices"
    );
  }

  get reservedNames(): ReservedNameLoader {
    return new ReservedNameLoader(
      "SaleSettings",
      this.get("id")!.toString(),
      "reservedNames"
    );
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tlds(): TldLoader {
    return new TldLoader("Account", this.get("id")!.toString(), "tlds");
  }

  get slds(): SldLoader {
    return new SldLoader("Account", this.get("id")!.toString(), "slds");
  }
}

export class Resolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Resolver must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Resolver", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get_in_block("Resolver", id));
  }

  static load(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get("Resolver", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addresses(): AddressLoader {
    return new AddressLoader(
      "Resolver",
      this.get("id")!.toString(),
      "addresses"
    );
  }

  get textRecords(): TextRecordLoader {
    return new TextRecordLoader(
      "Resolver",
      this.get("id")!.toString(),
      "textRecords"
    );
  }

  get textRecordHistory(): TextRecordHistoryLoader {
    return new TextRecordHistoryLoader(
      "Resolver",
      this.get("id")!.toString(),
      "textRecordHistory"
    );
  }

  get contenthash(): Bytes | null {
    let value = this.get("contenthash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contenthash(value: Bytes | null) {
    if (!value) {
      this.unset("contenthash");
    } else {
      this.set("contenthash", Value.fromBytes(<Bytes>value));
    }
  }

  get dnsRecords(): DnsRecordLoader {
    return new DnsRecordLoader(
      "Resolver",
      this.get("id")!.toString(),
      "dnsRecords"
    );
  }

  get dnsRecordHistory(): DnsRecordHistoryLoader {
    return new DnsRecordHistoryLoader(
      "Resolver",
      this.get("id")!.toString(),
      "dnsRecordHistory"
    );
  }

  get resolverHistory(): ResolverHistoryLoader {
    return new ResolverHistoryLoader(
      "Resolver",
      this.get("id")!.toString(),
      "resolverHistory"
    );
  }

  get dnsZonehash(): Bytes | null {
    let value = this.get("dnsZonehash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dnsZonehash(value: Bytes | null) {
    if (!value) {
      this.unset("dnsZonehash");
    } else {
      this.set("dnsZonehash", Value.fromBytes(<Bytes>value));
    }
  }

  get version(): BigInt {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get delegate(): string | null {
    let value = this.get("delegate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegate(value: string | null) {
    if (!value) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromString(<string>value));
    }
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Delegate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Delegate | null {
    return changetype<Delegate | null>(store.get_in_block("Delegate", id));
  }

  static load(id: string): Delegate | null {
    return changetype<Delegate | null>(store.get("Delegate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegate(): Bytes | null {
    let value = this.get("delegate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set delegate(value: Bytes | null) {
    if (!value) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Address extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Address entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Address must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Address", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Address | null {
    return changetype<Address | null>(store.get_in_block("Address", id));
  }

  static load(id: string): Address | null {
    return changetype<Address | null>(store.get("Address", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get cointype(): BigInt {
    let value = this.get("cointype");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cointype(value: BigInt) {
    this.set("cointype", Value.fromBigInt(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }
}

export class TextRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TextRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TextRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TextRecord", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TextRecord | null {
    return changetype<TextRecord | null>(store.get_in_block("TextRecord", id));
  }

  static load(id: string): TextRecord | null {
    return changetype<TextRecord | null>(store.get("TextRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }
}

export class DnsRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnsRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnsRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnsRecord", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DnsRecord | null {
    return changetype<DnsRecord | null>(store.get_in_block("DnsRecord", id));
  }

  static load(id: string): DnsRecord | null {
    return changetype<DnsRecord | null>(store.get("DnsRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get node(): Bytes {
    let value = this.get("node");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set node(value: Bytes) {
    this.set("node", Value.fromBytes(value));
  }

  get name(): Bytes {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes) {
    this.set("name", Value.fromBytes(value));
  }

  get resource(): BigInt {
    let value = this.get("resource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set resource(value: BigInt) {
    this.set("resource", Value.fromBigInt(value));
  }

  get record(): Bytes {
    let value = this.get("record");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set record(value: Bytes) {
    this.set("record", Value.fromBytes(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }
}

export class PremiumPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PremiumPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PremiumPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PremiumPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PremiumPrice | null {
    return changetype<PremiumPrice | null>(
      store.get_in_block("PremiumPrice", id)
    );
  }

  static load(id: string): PremiumPrice | null {
    return changetype<PremiumPrice | null>(store.get("PremiumPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleSettings(): string {
    let value = this.get("saleSettings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set saleSettings(value: string) {
    this.set("saleSettings", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ReservedName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReservedName entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReservedName must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReservedName", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReservedName | null {
    return changetype<ReservedName | null>(
      store.get_in_block("ReservedName", id)
    );
  }

  static load(id: string): ReservedName | null {
    return changetype<ReservedName | null>(store.get("ReservedName", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleSettings(): string {
    let value = this.get("saleSettings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set saleSettings(value: string) {
    this.set("saleSettings", Value.fromString(value));
  }

  get label(): string {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set label(value: string) {
    this.set("label", Value.fromString(value));
  }

  get claimant(): Bytes | null {
    let value = this.get("claimant");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claimant(value: Bytes | null) {
    if (!value) {
      this.unset("claimant");
    } else {
      this.set("claimant", Value.fromBytes(<Bytes>value));
    }
  }
}

export class TextRecordHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TextRecordHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TextRecordHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TextRecordHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TextRecordHistory | null {
    return changetype<TextRecordHistory | null>(
      store.get_in_block("TextRecordHistory", id)
    );
  }

  static load(id: string): TextRecordHistory | null {
    return changetype<TextRecordHistory | null>(
      store.get("TextRecordHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get changedAt(): BigInt {
    let value = this.get("changedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set changedAt(value: BigInt) {
    this.set("changedAt", Value.fromBigInt(value));
  }

  get changeType(): string {
    let value = this.get("changeType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set changeType(value: string) {
    this.set("changeType", Value.fromString(value));
  }
}

export class DnsRecordHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnsRecordHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnsRecordHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnsRecordHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DnsRecordHistory | null {
    return changetype<DnsRecordHistory | null>(
      store.get_in_block("DnsRecordHistory", id)
    );
  }

  static load(id: string): DnsRecordHistory | null {
    return changetype<DnsRecordHistory | null>(
      store.get("DnsRecordHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get node(): Bytes {
    let value = this.get("node");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set node(value: Bytes) {
    this.set("node", Value.fromBytes(value));
  }

  get name(): Bytes {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes) {
    this.set("name", Value.fromBytes(value));
  }

  get resource(): BigInt {
    let value = this.get("resource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set resource(value: BigInt) {
    this.set("resource", Value.fromBigInt(value));
  }

  get record(): Bytes {
    let value = this.get("record");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set record(value: Bytes) {
    this.set("record", Value.fromBytes(value));
  }

  get changedAt(): BigInt {
    let value = this.get("changedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set changedAt(value: BigInt) {
    this.set("changedAt", Value.fromBigInt(value));
  }

  get changeType(): string {
    let value = this.get("changeType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set changeType(value: string) {
    this.set("changeType", Value.fromString(value));
  }
}

export class SaleSettingsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SaleSettings[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SaleSettings[]>(value);
  }
}

export class SldLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Sld[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Sld[]>(value);
  }
}

export class RoyaltyHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RoyaltyHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RoyaltyHistory[]>(value);
  }
}

export class RenewalEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RenewalEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RenewalEvent[]>(value);
  }
}

export class PremiumPriceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PremiumPrice[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PremiumPrice[]>(value);
  }
}

export class ReservedNameLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ReservedName[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ReservedName[]>(value);
  }
}

export class TldLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Tld[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Tld[]>(value);
  }
}

export class AddressLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Address[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Address[]>(value);
  }
}

export class TextRecordLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TextRecord[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TextRecord[]>(value);
  }
}

export class TextRecordHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TextRecordHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TextRecordHistory[]>(value);
  }
}

export class DnsRecordLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DnsRecord[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DnsRecord[]>(value);
  }
}

export class DnsRecordHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DnsRecordHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DnsRecordHistory[]>(value);
  }
}

export class ResolverHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ResolverHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ResolverHistory[]>(value);
  }
}
